class GalleryPhotosController < ApplicationController
  layout 'group'

  before_filter :group_up_and_protect_privates
  before_filter :clean_tags, :only => [:create, :update]

  def new
    return redirect_to(group_gallery_photos_path(@group)) unless @group.is_member?(current_profile)
    respond_to do |format|
      format.js { render :layout => '/layouts/_popup' }
    end
  end

  def index
    @photos = @group.gallery_photos.all(gallery_photo_filters)
    if @group.is_sponsored?
      render :layout => '/layouts/sponsored_group'
    end
  end

  def update
    @photo = GalleryPhoto.find( params[:id] )
    @photo.update_attributes( params[:gallery_photo] )
    respond_to do |format|
      format.json { render :text => @photo.to_json(:methods => 'tag_list') }
    end
    if @group.is_sponsored?
      render :layout => '/layouts/sponsored_group'
    end
  end

  def create
    return redirect_to(group_gallery_photos_path(@group)) unless @group.is_member?(current_profile)
    @photo = GalleryPhoto.new(
      :caption => params[:gallery_photo][:caption],
      :gallery_photo_attachment => GalleryPhotoAttachment.new(params[:asset]),
      :uploader => current_profile,
      :tag_list => params[:gallery_photo][:tag_list],
      :group => @group)

    if params[:asset][:uploaded_data].blank?
      add_to_errors "We need an image for this award"
    else
      if @photo.save
        flash[:notice] = 'Photo was successfully uploaded!'
      else
        add_to_errors "We weren't able to save the photo :("
        add_to_errors "Is the photo less than 2MB and of type JPEG/JPG, GIF, or PNG?"
      end
    end
    redirect_to group_gallery_photos_path(@group)
  end

  def show
    begin
      @comment = Comment.new
      @photo = @group.gallery_photos.find(params[:id])
    rescue
      redirect_to group_gallery_photos_path(@group) and return if @photo.blank?
    end
    if @group.is_sponsored?
      render :layout => '/layouts/sponsored_group'
    end
  end

  def delete
    @photo = @group.gallery_photos.find(params[:id])
  end

  def destroy
    return redirect_to(group_gallery_photos_path(@group)) unless @group.is_member?(current_profile)
    @photo = @group.gallery_photos.find(params[:id])
    @photo.destroy
    add_to_notices "Photo was successfully deleted."
    redirect_to group_gallery_photos_path(@group)
    if @group.is_sponsored?
      render :layout => '/layouts/sponsored_group'
    end
  end

  def rate
    photo = @group.gallery_photos.find(params[:id])
    photo.rate(params[:rating].to_i, current_profile)
    photo.save
    photo.reload
    respond_to do |format|
      format.html { redirect_to :back }
      format.js { render(:partial => 'gallery_photos/rating', :layout => false, :locals => { :gallery_photo => photo } ) }
    end
    if @group.is_sponsored?
      render :layout => '/layouts/sponsored_group'
    end
  end

  def new_comment
    @photo = @group.gallery_photos.find(params[:id])
    @comment = Comment.new(:profile => current_profile, :owner => @photo, :owner_type => 'GalleryPhoto', :text => params[:comment][:text])
    if @comment.save
      redirect_to group_gallery_photo_path(@group, @photo)
    else
      add_to_errors(@comment)
      render :action => 'show'
    end
    if @group.is_sponsored?
      render :layout => '/layouts/sponsored_group'
    end
  end

  private

  def group_up_and_protect_privates
    @group = Group.find_by_id(params[:group_id])
    private_group_protection_needed
  end

  def clean_tags
    params[:gallery_photo][:tag_list] && params[:gallery_photo][:tag_list].tr!("'","")
  end

end
